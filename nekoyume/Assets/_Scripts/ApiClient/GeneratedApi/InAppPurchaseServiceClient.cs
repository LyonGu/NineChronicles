//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Do not modify the contents of this file directly.
//     Changes might be overwritten the next time the code is generated.
//     Source URL: https://1y09jlisv7.execute-api.us-east-2.amazonaws.com/preview/openapi.json
// </auto-generated>
//------------------------------------------------------------------------------
using System.Text.Json.Serialization;
using System.Collections.Generic;
using System;
using System.Collections;
using System.Text.Json;
using System.Threading.Tasks;
using System.Net.Http;
using UnityEngine.Networking;
using Cysharp.Threading.Tasks;
using System.Text;
using System.Linq;

public class InAppPurchaseServiceClient
{
    private string Url;

    public InAppPurchaseServiceClient(string url)
    {
        Url = url;
    }

    public void Dispose()
    {
    }

    public class CategorySchema
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("order")]
        public int Order { get; set; }
        [JsonPropertyName("active")]
        public bool Active { get; set; }
        [JsonPropertyName("l10n_key")]
        public string L10nKey { get; set; }
        [JsonPropertyName("path")]
        public string Path { get; set; }
        [JsonPropertyName("product_list")]
        public List<ProductSchema> ProductList { get; set; }
    }

    public class FreeReceiptSchema
    {
        [JsonPropertyName("sku")]
        public string Sku { get; set; }
        [JsonPropertyName("agentAddress")]
        public string AgentAddress { get; set; }
        [JsonPropertyName("avatarAddress")]
        public string AvatarAddress { get; set; }
        [JsonPropertyName("store")]
        public Store Store { get; set; }
        [JsonPropertyName("planetId")]
        public string? PlanetId { get; set; }
    }

    public class FullReceiptSchema
    {
        [JsonPropertyName("store")]
        public Store Store { get; set; }
        [JsonPropertyName("uuid")]
        public string Uuid { get; set; }
        [JsonPropertyName("order_id")]
        public string OrderId { get; set; }
        [JsonPropertyName("product")]
        public SimpleProductSchema? Product { get; set; }
        [JsonPropertyName("agent_addr")]
        public string AgentAddr { get; set; }
        [JsonPropertyName("avatar_addr")]
        public string AvatarAddr { get; set; }
        [JsonPropertyName("status")]
        public ReceiptStatus Status { get; set; }
        [JsonPropertyName("tx_id")]
        public string? TxId { get; set; }
        [JsonPropertyName("tx_status")]
        public TxStatus? TxStatus { get; set; }
        [JsonPropertyName("purchased_at")]
        public string PurchasedAt { get; set; }
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonPropertyName("planet_id")]
        public PlanetID PlanetId { get; set; }
    }

    public class FungibleAssetValueSchema
    {
        [JsonPropertyName("ticker")]
        public string Ticker { get; set; }
        [JsonPropertyName("amount")]
        public decimal Amount { get; set; }
    }

    public class FungibleItemSchema
    {
        [JsonPropertyName("sheet_item_id")]
        public int SheetItemId { get; set; }
        [JsonPropertyName("fungible_item_id")]
        public string FungibleItemId { get; set; }
        [JsonPropertyName("amount")]
        public int Amount { get; set; }
    }

    public class HTTPValidationError
    {
        [JsonPropertyName("detail")]
        public List<ValidationError> Detail { get; set; }
    }

    public class L10NSchema
    {
        [JsonPropertyName("host")]
        public string Host { get; set; }
        [JsonPropertyName("category")]
        public string Category { get; set; }
        [JsonPropertyName("product")]
        public string Product { get; set; }
    }

    public class MileageSchema
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }
        [JsonPropertyName("agent_addr")]
        public string AgentAddr { get; set; }
        [JsonPropertyName("mileage")]
        public int Mileage { get; set; }
    }

    [JsonConverter(typeof(PackageNameTypeConverter))]
    public enum PackageName
    {
        com_planetariumlabs_ninechroniclesmobile,
        com_planetariumlabs_ninechroniclesmobilek,
    }

    public class PackageNameTypeConverter : JsonConverter<PackageName>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "com.planetariumlabs.ninechroniclesmobile", "com_planetariumlabs_ninechroniclesmobile" },
            { "com.planetariumlabs.ninechroniclesmobilek", "com_planetariumlabs_ninechroniclesmobilek" },
        };
        public override PackageName Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (PackageName)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<PackageName>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            PackageName value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    [JsonConverter(typeof(PlanetIDTypeConverter))]
    public enum PlanetID
    {
        _0x000000000000,
        _0x000000000001,
        _0x000000000002,
        _0x100000000000,
        _0x100000000001,
        _0x100000000002,
    }

    public class PlanetIDTypeConverter : JsonConverter<PlanetID>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "0x000000000000", "_0x000000000000" },
            { "0x000000000001", "_0x000000000001" },
            { "0x000000000002", "_0x000000000002" },
            { "0x100000000000", "_0x100000000000" },
            { "0x100000000001", "_0x100000000001" },
            { "0x100000000002", "_0x100000000002" },
        };
        public override PlanetID Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (PlanetID)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<PlanetID>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            PlanetID value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    [JsonConverter(typeof(ProductAssetUISizeTypeConverter))]
    public enum ProductAssetUISize
    {
        _1x1,
        _1x2,
        _1x3,
        _1x4,
        _2x1,
        _2x2,
        _2x3,
        _2x4,
        _3x1,
        _3x2,
        _3x3,
        _3x4,
        _4x1,
        _4x2,
        _4x3,
        _4x4,
    }

    public class ProductAssetUISizeTypeConverter : JsonConverter<ProductAssetUISize>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "1x1", "_1x1" },
            { "1x2", "_1x2" },
            { "1x3", "_1x3" },
            { "1x4", "_1x4" },
            { "2x1", "_2x1" },
            { "2x2", "_2x2" },
            { "2x3", "_2x3" },
            { "2x4", "_2x4" },
            { "3x1", "_3x1" },
            { "3x2", "_3x2" },
            { "3x3", "_3x3" },
            { "3x4", "_3x4" },
            { "4x1", "_4x1" },
            { "4x2", "_4x2" },
            { "4x3", "_4x3" },
            { "4x4", "_4x4" },
        };
        public override ProductAssetUISize Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (ProductAssetUISize)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<ProductAssetUISize>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            ProductAssetUISize value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    [JsonConverter(typeof(ProductRarityTypeConverter))]
    public enum ProductRarity
    {
        Normal,
        Rare,
        Epic,
        Unique,
        Legendary,
    }

    public class ProductRarityTypeConverter : JsonConverter<ProductRarity>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override ProductRarity Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (ProductRarity)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<ProductRarity>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            ProductRarity value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class ProductSchema
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("order")]
        public int Order { get; set; }
        [JsonPropertyName("google_sku")]
        public string GoogleSku { get; set; }
        [JsonPropertyName("apple_sku")]
        public string AppleSku { get; set; }
        [JsonPropertyName("apple_sku_k")]
        public string AppleSkuK { get; set; }
        [JsonPropertyName("product_type")]
        public ProductType ProductType { get; set; }
        [JsonPropertyName("daily_limit")]
        public int? DailyLimit { get; set; }
        [JsonPropertyName("weekly_limit")]
        public int? WeeklyLimit { get; set; }
        [JsonPropertyName("account_limit")]
        public int? AccountLimit { get; set; }
        [JsonPropertyName("active")]
        public bool Active { get; set; }
        [JsonPropertyName("buyable")]
        public bool Buyable { get; set; }
        [JsonPropertyName("required_level")]
        public int? RequiredLevel { get; set; }
        [JsonPropertyName("mileage")]
        public int Mileage { get; set; }
        [JsonPropertyName("mileage_price")]
        public int? MileagePrice { get; set; }
        [JsonPropertyName("purchase_count")]
        public int PurchaseCount { get; set; }
        [JsonPropertyName("rarity")]
        public ProductRarity Rarity { get; set; }
        [JsonPropertyName("size")]
        public ProductAssetUISize Size { get; set; }
        [JsonPropertyName("discount")]
        public int Discount { get; set; }
        [JsonPropertyName("l10n_key")]
        public string L10nKey { get; set; }
        [JsonPropertyName("path")]
        public string Path { get; set; }
        [JsonPropertyName("bg_path")]
        public string? BgPath { get; set; }
        [JsonPropertyName("popup_path_key")]
        public string? PopupPathKey { get; set; }
        [JsonPropertyName("fav_list")]
        public List<FungibleAssetValueSchema> FavList { get; set; }
        [JsonPropertyName("fungible_item_list")]
        public List<FungibleItemSchema> FungibleItemList { get; set; }
    }

    [JsonConverter(typeof(ProductTypeTypeConverter))]
    public enum ProductType
    {
        IAP,
        FREE,
        MILEAGE,
    }

    public class ProductTypeTypeConverter : JsonConverter<ProductType>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
        };
        public override ProductType Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (ProductType)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<ProductType>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            ProductType value,
            JsonSerializerOptions options)
        {
            var enumString = value.ToString();
            if (InvalidEnumMapping.ContainsValue(enumString))
            {
                enumString = InvalidEnumMapping.First(kvp => kvp.Value == enumString).Key;
            }
            writer.WriteStringValue(enumString);
        }
    }

    public class ReceiptDetailSchema
    {
        [JsonPropertyName("store")]
        public Store Store { get; set; }
        [JsonPropertyName("uuid")]
        public string Uuid { get; set; }
        [JsonPropertyName("order_id")]
        public string OrderId { get; set; }
        [JsonPropertyName("status")]
        public ReceiptStatus Status { get; set; }
        [JsonPropertyName("tx_id")]
        public string? TxId { get; set; }
        [JsonPropertyName("tx_status")]
        public TxStatus? TxStatus { get; set; }
        [JsonPropertyName("planet_id")]
        public PlanetID PlanetId { get; set; }
        [JsonPropertyName("mileage_change")]
        public int MileageChange { get; set; }
        [JsonPropertyName("mileage_result")]
        public int MileageResult { get; set; }
    }

    public class ReceiptSchema
    {
        [JsonPropertyName("data")]
        public string? Data { get; set; }
        [JsonPropertyName("store")]
        public Store? Store { get; set; }
        [JsonPropertyName("payload")]
        public object? Payload { get; set; }
        [JsonPropertyName("order")]
        public object? Order { get; set; }
        [JsonPropertyName("agentAddress")]
        public string? AgentAddress { get; set; }
        [JsonPropertyName("avatarAddress")]
        public string? AvatarAddress { get; set; }
        [JsonPropertyName("planetId")]
        public string? PlanetId { get; set; }
    }

    [JsonConverter(typeof(ReceiptStatusTypeConverter))]
    public enum ReceiptStatus
    {
        INIT = 0,
        VALIDATION_REQUEST = 1,
        VALID = 10,
        REFUNDED_BY_ADMIN = 20,
        INVALID = 91,
        REFUNDED_BY_BUYER = 92,
        PURCHASE_LIMIT_EXCEED = 93,
        TIME_LIMIT = 94,
        REQUIRED_LEVEL = 95,
        NOT_ENOUGH_MILEAGE = 96,
        UNKNOWN = 99,
    }

    public class ReceiptStatusTypeConverter : JsonConverter<ReceiptStatus>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "0", "INIT" },
            { "1", "VALIDATION_REQUEST" },
            { "10", "VALID" },
            { "20", "REFUNDED_BY_ADMIN" },
            { "91", "INVALID" },
            { "92", "REFUNDED_BY_BUYER" },
            { "93", "PURCHASE_LIMIT_EXCEED" },
            { "94", "TIME_LIMIT" },
            { "95", "REQUIRED_LEVEL" },
            { "96", "NOT_ENOUGH_MILEAGE" },
            { "99", "UNKNOWN" },
        };
        public override ReceiptStatus Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (ReceiptStatus)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<ReceiptStatus>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            ReceiptStatus value,
            JsonSerializerOptions options)
        {
            writer.WriteNumberValue((int)value);
        }
    }

    public class RefundedReceiptSchema
    {
        [JsonPropertyName("store")]
        public Store Store { get; set; }
        [JsonPropertyName("uuid")]
        public string Uuid { get; set; }
        [JsonPropertyName("order_id")]
        public string OrderId { get; set; }
        [JsonPropertyName("status")]
        public ReceiptStatus Status { get; set; }
        [JsonPropertyName("tx_id")]
        public string? TxId { get; set; }
        [JsonPropertyName("tx_status")]
        public TxStatus? TxStatus { get; set; }
        [JsonPropertyName("agent_addr")]
        public string? AgentAddr { get; set; }
        [JsonPropertyName("purchased_at")]
        public string PurchasedAt { get; set; }
        [JsonPropertyName("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonPropertyName("planet_id")]
        public PlanetID PlanetId { get; set; }
    }

    public class SimpleProductSchema
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }
        [JsonPropertyName("order")]
        public int Order { get; set; }
        [JsonPropertyName("google_sku")]
        public string GoogleSku { get; set; }
        [JsonPropertyName("apple_sku")]
        public string AppleSku { get; set; }
        [JsonPropertyName("apple_sku_k")]
        public string AppleSkuK { get; set; }
        [JsonPropertyName("product_type")]
        public ProductType ProductType { get; set; }
        [JsonPropertyName("daily_limit")]
        public int? DailyLimit { get; set; }
        [JsonPropertyName("weekly_limit")]
        public int? WeeklyLimit { get; set; }
        [JsonPropertyName("account_limit")]
        public int? AccountLimit { get; set; }
        [JsonPropertyName("active")]
        public bool Active { get; set; }
        [JsonPropertyName("buyable")]
        public bool Buyable { get; set; }
        [JsonPropertyName("required_level")]
        public int? RequiredLevel { get; set; }
        [JsonPropertyName("mileage")]
        public int Mileage { get; set; }
        [JsonPropertyName("mileage_price")]
        public int? MileagePrice { get; set; }
    }

    public class SimpleReceiptSchema
    {
        [JsonPropertyName("data")]
        public string? Data { get; set; }
        [JsonPropertyName("store")]
        public Store? Store { get; set; }
        [JsonPropertyName("payload")]
        public object? Payload { get; set; }
        [JsonPropertyName("order")]
        public object? Order { get; set; }
    }

    [JsonConverter(typeof(StoreTypeConverter))]
    public enum Store
    {
        TEST = 0,
        APPLE = 1,
        GOOGLE = 2,
        APPLE_TEST = 91,
        GOOGLE_TEST = 92,
    }

    public class StoreTypeConverter : JsonConverter<Store>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "0", "TEST" },
            { "1", "APPLE" },
            { "2", "GOOGLE" },
            { "91", "APPLE_TEST" },
            { "92", "GOOGLE_TEST" },
        };
        public override Store Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (Store)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<Store>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            Store value,
            JsonSerializerOptions options)
        {
            writer.WriteNumberValue((int)value);
        }
    }

    [JsonConverter(typeof(TxStatusTypeConverter))]
    public enum TxStatus
    {
        CREATED = 1,
        STAGED = 2,
        SUCCESS = 10,
        FAILURE = 91,
        INVALID = 92,
        NOT_FOUND = 93,
        FAIL_TO_CREATE = 94,
        UNKNOWN = 99,
    }

    public class TxStatusTypeConverter : JsonConverter<TxStatus>
    {
        public static readonly Dictionary<string, string> InvalidEnumMapping = new Dictionary<string, string>
        {
            { "1", "CREATED" },
            { "2", "STAGED" },
            { "10", "SUCCESS" },
            { "91", "FAILURE" },
            { "92", "INVALID" },
            { "93", "NOT_FOUND" },
            { "94", "FAIL_TO_CREATE" },
            { "99", "UNKNOWN" },
        };
        public override TxStatus Read(
            ref Utf8JsonReader reader,
            Type typeToConvert,
            JsonSerializerOptions options)
        {
            return reader.TokenType switch
            {
                JsonTokenType.Number => (TxStatus)reader.GetInt32(),
                JsonTokenType.String => Enum.Parse<TxStatus>(InvalidEnumMapping.TryGetValue(reader.GetString(), out var validName) ? validName : reader.GetString()),
                _ => throw new JsonException(
                    $"Expected token type to be {string.Join(" or ", new[] { JsonTokenType.Number, JsonTokenType.String })} but got {reader.TokenType}")
            };
        }
        public override void Write(
            Utf8JsonWriter writer,
            TxStatus value,
            JsonSerializerOptions options)
        {
            writer.WriteNumberValue((int)value);
        }
    }

    public class ValidationError
    {
        [JsonPropertyName("loc")]
        public List<string?> Loc { get; set; }
        [JsonPropertyName("msg")]
        public string Msg { get; set; }
        [JsonPropertyName("type")]
        public string Type { get; set; }
    }

    public async Task GetPingAsync(Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/ping";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetPurchaseLogAsync(string planet_id, string agent_address, string avatar_address, string product_id, string? order_id, string? data, Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/log";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?planet_id={planet_id}&agent_address={agent_address}&avatar_address={avatar_address}&product_id={product_id}&order_id={order_id}&data={data}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task PostPurchaseRetryAsync(PackageName? x_iap_packagename, SimpleReceiptSchema requestBody, Action<ReceiptDetailSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/retry";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                ReceiptDetailSchema result = System.Text.Json.JsonSerializer.Deserialize<ReceiptDetailSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task PostPurchaseRequestAsync(PackageName? x_iap_packagename, ReceiptSchema requestBody, Action<ReceiptDetailSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/request";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                ReceiptDetailSchema result = System.Text.Json.JsonSerializer.Deserialize<ReceiptDetailSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task PostPurchaseFreeAsync(PackageName? x_iap_packagename, FreeReceiptSchema requestBody, Action<ReceiptDetailSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/free";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                ReceiptDetailSchema result = System.Text.Json.JsonSerializer.Deserialize<ReceiptDetailSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task PostPurchaseMileageAsync(PackageName? x_iap_packagename, FreeReceiptSchema requestBody, Action<ReceiptDetailSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/mileage";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            var bodyString = System.Text.Json.JsonSerializer.Serialize(requestBody);
            var jsonToSend = new UTF8Encoding().GetBytes(bodyString);
            request.uploadHandler = new UploadHandlerRaw(jsonToSend);
            request.uploadHandler.contentType = "application/json";
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                ReceiptDetailSchema result = System.Text.Json.JsonSerializer.Deserialize<ReceiptDetailSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetPurchaseStatusAsync(object uuid, Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/purchase/status";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?uuid={uuid}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetProductAsync(string agent_addr, string planet_id, PackageName? x_iap_packagename, Action<CategorySchema[]> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/product";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?agent_addr={agent_addr}&planet_id={planet_id}";
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                CategorySchema[] result = System.Text.Json.JsonSerializer.Deserialize<CategorySchema[]>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetProductAllAsync(Action<SimpleProductSchema[]> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/product/all";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                SimpleProductSchema[] result = System.Text.Json.JsonSerializer.Deserialize<SimpleProductSchema[]>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetL10nAsync(PackageName? x_iap_packagename, Action<L10NSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/l10n";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            string headerValue = x_iap_packagename.ToString();
            if (PackageNameTypeConverter.InvalidEnumMapping.ContainsValue(headerValue))
            {
                headerValue = PackageNameTypeConverter.InvalidEnumMapping.First(kvp => kvp.Value == headerValue).Key;
            }
            request.SetRequestHeader("x-iap-packagename", headerValue);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                L10NSchema result = System.Text.Json.JsonSerializer.Deserialize<L10NSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetMileageAsync(string agent_addr, string planet_id, Action<MileageSchema> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/mileage";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?agent_addr={agent_addr}&planet_id={planet_id}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                MileageSchema result = System.Text.Json.JsonSerializer.Deserialize<MileageSchema>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task PostAdminUpdatepriceAsync(Store store, Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/admin/update-price";
        using (var request = new UnityWebRequest(url, "POST"))
        {
            url += $"?store={store}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetAdminRefundedAsync(int? start, int limit, Action<RefundedReceiptSchema[]> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/admin/refunded";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?start={start}&limit={limit}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                RefundedReceiptSchema[] result = System.Text.Json.JsonSerializer.Deserialize<RefundedReceiptSchema[]>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetAdminReceiptAsync(int page, int pp, Action<FullReceiptSchema[]> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/api/admin/receipt";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?page={page}&pp={pp}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                FullReceiptSchema[] result = System.Text.Json.JsonSerializer.Deserialize<FullReceiptSchema[]>(responseBody);
                onSuccess?.Invoke(result);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetViewsAsync(string page, Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/views/{page}";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

    public async Task GetViewsAsync2(string page, Action<string> onSuccess, Action<string> onError)
    {
        string url = $"{Url}/views/";
        using (var request = new UnityWebRequest(url, "GET"))
        {
            url += $"?page={page}";
            request.uri = new Uri(url);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("accept", "application/json");
            request.SetRequestHeader("Content-Type", "application/json");
            request.timeout = 10;
            try
            {
                await request.SendWebRequest();
                if (request.result != UnityWebRequest.Result.Success)
                {
                    onError?.Invoke(request.error);
                    return;
                }
                string responseBody = request.downloadHandler.text;
                onSuccess?.Invoke(responseBody);
            }
            catch (Exception ex)
            {
                onError?.Invoke(ex.Message);
            }
        }
    }

}
